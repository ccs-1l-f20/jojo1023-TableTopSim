@page "/Game/{RoomId:int}/{PlayerId:int}"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject GlobalData GlobalData
@using TableTopSim.Client.GameLibComponents
@using GameLib
@using TableTopSim.Shared
@using DataLayer
@using System.Threading;
@using GameLib.Sprites
@using System.Numerics
@using TableTopSim.Client.SpecificGame
@using Newtonsoft.Json;
@inject Uri WebSocketUri
<img src="/images/ImageNotFound.png" asp-append-version="true" @ref="imageNotFound" style="display:none" />
@if (imageDtos != null)
{
    @foreach (var imgId in imageDtos.Keys)
    {
        <img src="@imageDtos[imgId].Url" asp-append-version="true" @ref="imageElementRefs[imgId]" style="display:none" />
    }
}
@if (gameProgram != null)
{
    <Game Size="size" Cts="cts" GameManager="gameProgram.Manager" @ref="gameComponent" />
}
@code {
    [Parameter]
    public int PlayerId { get; set; }
    [Parameter]
    public int RoomId { get; set; }
    Game gameComponent;
    GameProgram gameProgram;
    //GameManager gameManager;
    Player thisPlayer;
    GameLib.Size size = new GameLib.Size(1000, 1000);
    CancellationTokenSource cts = new CancellationTokenSource();
    GameDataDto gameInfo = null;
    Dictionary<int, ImageDto> imageDtos = null;
    Dictionary<int, ElementReference> imageElementRefs = new Dictionary<int, ElementReference>();
    ElementReference imageNotFound;
    //RectSprite rectSprite, rectSprite2, rectSprite3, rectSprite4;
    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        await Task.Delay(new Random().Next(0, 300));
        thisPlayer = await GlobalData.ReconnectWebSocket(WebSocketUri, PlayerId);
        if (thisPlayer == null)
        {
            GlobalData.ShowMessage($"The Player Does Not Exist");
            cts.Cancel();
            NavigationManager.NavigateTo("");
            return;
        }
        else if (thisPlayer.RoomId == null)
        {
            GlobalData.ShowMessage($"The Player Is Not In A Room");
            cts.Cancel();
            NavigationManager.NavigateTo("");
            return;
        }
        else if (thisPlayer.RoomId != RoomId)
        {
            GlobalData.ShowMessage($"The Player Is Not In Room: {RoomId}");
            cts.Cancel();
            NavigationManager.NavigateTo("");
            return;
        }
        else if (thisPlayer.RoomOpen)
        {
            GlobalData.ShowMessage($"The Game Has Not Started Yet");
            cts.Cancel();
            NavigationManager.NavigateTo($"Lobby/{RoomId}/{PlayerId}");
            return;
        }
        gameInfo = await ReTryer.Try(300, 3, async () => await GameDL.GetGame(Http, thisPlayer.GameId));
        if (gameInfo == null)
        {
            GlobalData.ShowMessage($"Connection Issue");
            cts.Cancel();
            NavigationManager.NavigateTo($"");
            return;
        }
        size = new GameLib.Size(gameInfo.Width, gameInfo.Height);
        _ = GetGameImages(thisPlayer.GameId);
        //var refManager = new SpriteRefrenceManager();
        //gameManager = new GameManager(size, refManager);

        //rectSprite = new RectSprite(refManager, new Vector2(400, 400), new Vector2(200, 200), new GameLib.Color(255, 255, 0), new Vector2(100, 100), 15);
        //gameManager.AddSprite(100, rectSprite);

        //rectSprite2 = new RectSprite(refManager, new Vector2(-100, 0), new Vector2(40, 40), new GameLib.Color(0, 100, 255), new Vector2(20, 20), 0);
        //rectSprite2.LayerDepth.Layers[0] = 0;
        //rectSprite2.Transform.Parent = 100;
        //gameManager.AddSprite(101, rectSprite2);

        //rectSprite4 = new RectSprite(refManager, new Vector2(200, 200), new Vector2(80, 80), new GameLib.Color(255, 0, 60), new Vector2(40, 40), 0);
        //rectSprite4.Transform.Parent = 100;
        //gameManager.AddSprite(103, rectSprite4);

        //rectSprite3 = new RectSprite(refManager, new Vector2(-40, -40), new Vector2(10, 10), new GameLib.Color(128, 128, 128), new Vector2(5, 5), 0);
        //rectSprite3.LayerDepth.Layers[0] = -1;
        //rectSprite3.Transform.Parent = 101;
        //gameManager.AddSprite(102, rectSprite3);

        //gameManager.OnUpdate += TestUpdate;

        Dictionary<int, StackableDataInfo> stackableInfo = JsonConvert.DeserializeObject<Dictionary<int, StackableDataInfo>>(gameInfo.SerializedStackableInfoDictionary);
        gameProgram = new GameProgram(size, gameInfo.BackroundColor, GlobalData.WebSocket, RoomId, PlayerId, imageElementRefs, imageNotFound, stackableInfo);
    }
    async Task GetGameImages(int gameId)
    {
        imageDtos = await ReTryer.Try(300, 3, async () => await GameDL.GetGameImages(Http, thisPlayer.GameId));
        if (imageDtos != null)
        {
            imageElementRefs.Clear();
            foreach (var id in imageDtos.Keys)
            {
                imageElementRefs.Add(id, new ElementReference());
            }

            StateHasChanged();
        }
    }
    void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        gameProgram.Dispose();
        cts.Cancel();
    }
    void OnResetTransform()
    {
        if (gameProgram != null)
        {
            gameProgram.ResetTransform();
        }
    }


    void TestUpdate(TimeSpan ts)
    {
        //rectSprite.Transform.Rotation += 0.5f;
        //if (rectSprite.Transform.Scale.Y > 1)
        //{
        //    rectSprite.Transform.Scale -= new Vector2(0, 0.005f);
        //}
        //if (rectSprite.Transform.Scale.X > 1)
        //{
        //    rectSprite.Transform.Scale -= new Vector2(0.001f, 0);
        //}
        //rectSprite2.Transform.Rotation -= 1f;
        //rectSprite3.Transform.Rotation += 1f;
        //rectSprite4.Transform.Rotation -= 0.05f;
    }
}
