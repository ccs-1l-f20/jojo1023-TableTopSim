@page "/Lobby/{RoomId:int}/{PlayerId:int}"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject GlobalData GlobalData
@using TableTopSim.Shared
@using DataLayer
@using System.Threading
<h3>Room: @RoomId</h3>

@if (players == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Table>
        <TableBody>
            <TableRow>
                <TableRowCell>@thisPlayer.Name <b>(You)</b></TableRowCell>
            </TableRow>
            @foreach (var player in players)
            {
                @if (player.PlayerId != PlayerId)
                {
                    <TableRow>
                        <TableRowCell>@player.Name</TableRowCell>
                    </TableRow>
                }
            }
        </TableBody>
    </Table>

    <br />

    @if (thisPlayer.IsHost)
    {
        <Button Clicked="OnStartGameClick" Color="Color.Primary">Start Game</Button>
    }
}

@code {
    [Parameter]
    public int RoomId { get; set; }
    [Parameter]
    public int PlayerId { get; set; }

    public Player[] players { get; set; } = null;
    Player thisPlayer = null;
    CancellationTokenSource cts = new CancellationTokenSource();
    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        _ = UpdatePlayers(cts.Token);
    }
    void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        cts.Cancel();
    }

    async Task UpdatePlayers(CancellationToken ct)
    {
        thisPlayer = await ReTryer.Try(100, 5, async () => await RoomDL.GetPlayerRoom(Http, PlayerId));
        if (thisPlayer == null)
        {
            GlobalData.ShowMessage($"The Player Does Not Exist");
            cts.Cancel();
            NavigationManager.NavigateTo("");
            return;
        }
        else if(thisPlayer.RoomId == null)
        {
            GlobalData.ShowMessage($"The Player Is Not In A Room");
            cts.Cancel();
            NavigationManager.NavigateTo("");
            return;
        }
        else if(thisPlayer.RoomId != RoomId)
        {
            GlobalData.ShowMessage($"The Player Is Not In Room: {RoomId}");
            cts.Cancel();
            NavigationManager.NavigateTo("");
            return;
        }
        while (true)
        {
            if (ct.IsCancellationRequested) { break; }
            Player[] newPlayers = await ReTryer.Try(100, 3, async ()=> await RoomDL.GetPlayers(Http, RoomId));
            if(newPlayers == null)
            {
                GlobalData.ShowMessage($"An Error Has Occured");
            }
            else
            {
                players = newPlayers;
                StateHasChanged();
            }


            await Task.Delay(1000, ct);
        }
    }

    async void OnStartGameClick()
    {
        cts.Cancel();
        bool sucsessful = await ReTryer.Try(100, 5, async () => await RoomDL.StartGame(Http, RoomId, PlayerId));
        if (sucsessful)
        {
            NavigationManager.NavigateTo($"/Game/{RoomId}/{PlayerId}");
        }
        else
        {
            GlobalData.ShowMessage($"An Error Has Occured");
        }
    }
}
