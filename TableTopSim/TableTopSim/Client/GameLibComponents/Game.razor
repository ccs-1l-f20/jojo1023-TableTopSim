@using Blazor.Extensions.Canvas.Canvas2D;
@using System.Numerics;
@using GameLib;
@using System.Diagnostics;
@using System.Threading;
@using MyCanvasLib;
@using System.Text.Json;

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject GlobalData GlobalData


<div @onkeydown="@KeyDown" @onkeyup="@KeyUp" tabindex="0" @ref="globalDiv"></div>
<div @onmousemove="MouseMove" @onmousedown="MouseDown" @onmouseup="MouseUp" @onmousewheel="MouseWheel" @ref="div" style="width:100%;height:100%">
    <MyCanvas Width="@Width" Height="@Height" @ref="canvas" />
</div>

@code {
    [Parameter]
    public GameManager GameManager { get; set; }
    [Parameter]
    public GameLib.Size Size { get; set; }
    [Parameter]
    public CancellationTokenSource Cts { get; set; }
    long Width => Size.Width;
    long Height => Size.Height;

    bool renderUi = false;
    private MyCanvas2DContext context;
    protected MyCanvas canvas;
    Vector2 mousePos = Vector2.Zero;
    ElementReference div;
    ElementReference globalDiv;
    BoundingClientRect boundingClientRect;
    bool hasRendered = false;
    GameLib.Size canvasVisualSize;
    Queue<MouseState> mouseStateQueue = new Queue<MouseState>();
    MouseState lastMouseStateInserted;
    object mouseLo = new object();
    double mouseWheelUpdate = 0;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        GlobalData.OnBrowserResize += OnBrowserResize;
    }
    WebGLWrapper glWrap;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("SetFocusTo", globalDiv);
            await OnBrowserResize();
            //context = await canvas.CreateCanvas2DAsync();
            var gl = await canvas.CreateWebGLAsync();



            glWrap = new WebGLWrapper(gl, 1, 0, 0, 1, Width, Height);
            await glWrap.Init();

            //await context.ClearRectAsync(0, 0, Width, Height);
            _ = Update(Cts.Token);
        }
    }
    void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        GlobalData.Reset();
        Cts.Cancel();
    }
    async Task OnBrowserResize()
    {
        long windowWidth = await JSRuntime.InvokeAsync<long>("browserResize.getInnerWidth") - 100;
        long windowHeight = await JSRuntime.InvokeAsync<long>("browserResize.getInnerHeight") - 100;
        int[] maxSize = await JSRuntime.InvokeAsync<int[]>("FillCanvas", canvas.CanvasReference);
        long maxWidth = maxSize[0];
        long maxHeight = maxSize[1];
        maxWidth = Math.Min(maxWidth, Math.Max(1, windowWidth));
        maxHeight = Math.Min(maxHeight, Math.Max(1, windowHeight));
        long newWidth;
        long newHeight;
        if (Width / maxWidth > Height / maxHeight)
        {
            newWidth = maxWidth;
            newHeight = (long)(Height * (maxWidth / Width));
        }
        else
        {

            newWidth = (long)(Width * (maxHeight / (double)Height));
            newHeight = maxHeight;
        }
        await JSRuntime.InvokeVoidAsync("SetCanvasSize", canvas.CanvasReference, newWidth, newHeight);
        canvasVisualSize = new GameLib.Size(newWidth, newHeight);
    }
    public async Task Update(CancellationToken ct)
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();
        while (true)
        {
            if (ct.IsCancellationRequested) { break; }
            await glWrap.Init();
            //if (GameManager != null)
            //{
            //    MouseState ms = MouseState.Hover;
            //    Vector2 currentMousePos;
            //    lock (mouseLo)
            //    {
            //        currentMousePos = mousePos;
            //        if (mouseStateQueue.Count == 1)
            //        {
            //            ms = mouseStateQueue.Peek();
            //        }
            //        else if(mouseStateQueue.Count > 1)
            //        {
            //            ms = mouseStateQueue.Dequeue();
            //        }
            //    }
            //    var mwu = mouseWheelUpdate;
            //    mouseWheelUpdate = 0;
            //    await GameManager.Update(context, stopwatch.Elapsed, ct, ms, currentMousePos, mwu);
            //}

            //long previousElapsedMilli = stopwatch.ElapsedMilliseconds;
            stopwatch.Restart();
            await Task.Delay(16, ct);
        }
    }
    void MouseUp(MouseEventArgs args)
    {
        //System.Diagnostics.Debug.WriteLine("Mouse Up");
        if (hasRendered)
        {
            AddMouseState(MouseState.Hover);
            //GameManager.MouseUp();
        }
    }
    void MouseDown(MouseEventArgs args)
    {
        //System.Diagnostics.Debug.WriteLine("Mouse Down");
        if (hasRendered)
        {
            AddMouseState(MouseState.Down);
            //GameManager.MouseDown();
        }
    }
    void MouseMove(MouseEventArgs args)
    {
        if (hasRendered && boundingClientRect != null && GameManager != null)
        {
            Vector2 newMsPs = new Vector2((float)(args.ClientX - boundingClientRect.Left), (float)(args.ClientY - boundingClientRect.Top));
            float scaleVal = Size.Width / (float)canvasVisualSize.Width;
            lock (mouseLo)
            {
                mousePos = new Vector2(scaleVal * newMsPs.X, scaleVal * newMsPs.Y);
            }
            //GameManager.MouseMove(mousePos);
        }
    }
    void AddMouseState(MouseState mouseState)
    {
        lock (mouseLo)
        {
            if (mouseStateQueue.Count == 0 || lastMouseStateInserted != mouseState)
            {
                mouseStateQueue.Enqueue(mouseState);
                lastMouseStateInserted = mouseState;
            }
        }
    }
    void MouseWheel(WheelEventArgs args)
    {
        //Debug.WriteLine($"MW: {args.DeltaY}");
        mouseWheelUpdate += args.DeltaY;
    }
    protected override bool ShouldRender()
    {
        hasRendered = true;
        UpdateBoundingRect();
        return renderUi;
    }
    async void UpdateBoundingRect()
    {
        boundingClientRect = await JSRuntime.InvokeAsync<BoundingClientRect>
    ("MyDOMGetBoundingClientRect", div);
        await JSRuntime.InvokeVoidAsync("SetFocusTo", globalDiv);
    }

    void KeyDown(KeyboardEventArgs args)
    {
        GameManager.KeyDown(args);
    }
    void KeyUp(KeyboardEventArgs args)
    {
        GameManager.KeyUp(args);
    }
}
